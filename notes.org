* Emacs is not just a text editor
Emacs is a Lisp virtual machine made for manipulating text.

With Emacs, you can execute code /anywhere/.  If I put my cursor at the end of
this snippet and press C-x C-e:

(progn
  (search-backward "Lisp" nil t 2)
  (set-mark (point))
  (forward-word))

The word "Lisp" in the first sentence of this note is now highlighted.

I've just told Emacs to run three commands in sequence: first search for the
"Lisp" string backward from point (what Emacs calls the cursor), and stop at the
second occurence (because the first occurence is the first argument to
search-backward); then activate the region (what Emacs calls the selection), and
lasty advance the cursor by a word.

We can call external processes just as easily:

(progn
  (forward-char)
  (call-process "ls" nil t t "/"))

Here we are calling ~ls /~ and injecting the results directly in our buffer.
(The forward-char just advances point so that the results begin after a
newline.)

Text, external processes, windows... most of what you see in Emacs is accessible
and customizable via Lisp.

Emacs is not an editor that you just use, but one that /grows/ with you.  You
can, and should tune it to your needs.

- It's portable and runs basically everywhere.
- It's fully customizable.
- It's self-documented.  Not only it includes an [[info:Emacs][extensive user manual]], but
  there is [[info:ELisp][a separate manual just on Emacs Lisp]].

And you don't need to start from scratch!  Emacs already includes a ton of
functionality, and there are many, /many/ packages out there to extend it.

See [[*Starting with Emacs][Starting with Emacs]] for more.

Now we will focus on Org.

* Org overview
It's like markdown, but better.

** It's just text!
An Org file is a text file, with few symbols (*bold* /emphatic/ ~code~), which
makes it readable and portable like markdown.

(You can even [[help:org-hide-emphasis-markers][hide the symbols]]!)

** Each headline is a note
Top-level headlines start with a star ~*~.  More stars indicate sub-headings,
like ~#~ in markdown.

#+BEGIN_SRC org
,* A level 1 headline
,** A level 2 headline
,*** A level 3 headline
,** Another level 2 headline
,* Another level 1 headline
#+END_SRC

** Built-in folding and structured editing
Any headline or item under point can be folded with TAB.

You can move headlines up and down (M-<UP>, M-<DOWN>), and change the depth of
single headlines (M-<LEFT>, M-<RIGHT>), or even of whole subtrees (M-S-<LEFT>,
M-S-<RIGHT>).

(more in the [[info:org#Structure%20editing][Org manual]])

** Links are interactive
Add a link with C-c C-l, or using the syntax:

: [[protocol:url][description]]

Using C-c C-o with a link under point, or clicking on it will browse to that
location.

Here is [[info:org#Hyperlinks][a link to the Org manual section on links]].

** Links are extensible!
What browsing to a link does depend on the protocol.

Org supports multiple protocols.  HTTP links will open the link in your browser
by default.  But you can also link to [[*Links are interactive][Org headlines]] (even in other files), to
Emacs [[help:help][help]], to bibtex entries, to mails... and [[info:org#Adding%20hyperlink%20types][more]]!

** Export to HTML, LaTeX...
C-c C-e brings you the export dispatcher, where you can export your Org file(s)
to HTML, LaTeX, or even ODT!  (And that's not counting other community options
like [[https://github.com/jkitchin/scimax/blob/master/ox-word.el][ox-word]].)

The export makes it easy to draft papers or share your notes with others.

By customizing the export process, it is even possible to write books and power
entire blogs using Org as the source material.

- My whole [[https://github.com/fmdkdd/phd-manuscript/][PhD manuscript]] is written in Org, exporting to both HTML /and/ LaTeX.
- [[https://www.atlanmod.org/emfviews/manual/user.html][The manual for the Eclipse tool]] I maintain is written entirely in Org, and is
  exported both to HTML for Github pages and as an Eclipse help plugin for
  offline consultation.

We'll see an example of exporting from Org to an HTML blog in [[#ex:blog][Example 5]].

** Org can evaluate programming languages blocks
You can include snippets of code in Org with the BEGIN_SRC syntax:

#+BEGIN_SRC python
return sorted([5, 2, 4, 3, 1])
#+END_SRC

Here we are telling Org that the code is in Python, so we get proper syntax
highlighting.  But that's not all!

The advantage of Org source blocks is that you can /evaluate/ them with C-c C-c
with the block under point:

#+BEGIN_SRC python
return sorted([5, 2, 4, 3, 1])
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 |

(You may need to (require 'ob-python) first.)

We get the sorted list, parsed automatically as an Org table (so we can reuse it
in the Org document, or even pass it to other source blocks!).

Org can evaluate many common programming languages like this.  When exporting,
Org can re-run all your code blocks to update the results.  You can even choose
whether to export the code, the results, or both.

Evaluating source blocks is very useful when writing tutorials ([[#ex:tp][Example 4]]), or
doing literate data visualization ([[#ex:blog][Example 5]]).

** Headlines can be tagged
Tags are on the same line as the headline title, but separated by colons ~:~.
Or use C-c C-q to change the tags for the nearest parent headline.

#+BEGIN_SRC org
,* A headline with tags                                   :org:tutorial:emacs:
#+END_SRC

Tags provide an additional way to organize your notes, beside the default
hierarchy of headlines.

Tags are useful for narrowing down notes in large files with org-sparse-tree
(C-c /).  We'll see that in the [[#ex:log][first example]].

* Example 1: Keeping a research log
:PROPERTIES:
:CUSTOM_ID: ex:log
:END:

** You should keep log too!
I cannot recommend enough keeping a log of your research.  Even if you don't
plan on using Org to do it, even if it's just on paper.  Keeping a log has
immediate benefits:

- Writing down your thoughts can help clarifying them.  Even if you never go
  back to your notes, just writing down your thoughts can help solve the
  problems you are working on.

- It's a place to put down all the information you may need later.  Links to
  websites, useful shell commands, excerpts of logs, screenshots...  It's
  tremendously useful to be able to go back one year earlier and /see/ the
  problem you were dealing with at the time, and why you choose that solution
  over the others.

Once you accumulate notes (or fill logbooks), you now have a visual measure of
your /efforts/.  Working on research problems, a lot of time it may feel like we
do not make actual measurable progress.  This can be demotivating.  Instead,
when you write down what you did for the day, even if it failed, it /feels/ like
you made some progress, even if it was just eliminating a dead-end.  You can
then look back at all the failed approaches and actually appreciate the work
that has been required to reach your goal.

** I'll show you mine
Let's look at [[https://github.com/fmdkdd/asobiba/blob/master/timeline.org][an Org log]].  Every top-level headline is a day.  Sub-headings
concern different tasks or projects, and are tagged appropriately.

With tags, we can easily search for all notes regarding my [[https://github.com/fmdkdd/gbs][GameBoy Sound
emulator]] by looking for the ~gbs~ tag: C-c / m gbs RET.

Sometimes I forget to tag notes, but it's okay I can still search through the
file with C-s, or with ~C-c / r~.

** Smooth screenshot insertion
As a good picture is worth a thousand words, I try to include relevant
screenshots in my notes.  I wrote a small Lisp function to make it
friction-less:

#+BEGIN_SRC elisp
(defun insert-screenshot (file-name)
  "Save screenshot to FILE-NAME and insert an Org link at point."
  (interactive "FSave to file: ")
  (let ((absolute-path (expand-file-name file-name)))
    (call-process "import" nil nil nil absolute-path)
    (insert (format "[[file:%s]]" absolute-path))
    (org-redisplay-inline-images)))
#+END_SRC

This is how you define custom commands in Emacs Lisp.  The ~interactive~ macro
says we are defining a command that should be called interactively (via M-x)
rather than programmatically, and it also specifies the user prompt message to
get the file path.  Then we get expand this path to an absolute one.  We pass
the absolute path to ImageMagick's import program, which does the
screenshotting and saves the file.  Then we insert the Org-format link to the
file in the current buffer, and finally we tell Org to redisplay images from the
buffer so we can see it directly.

After evaluating the above block, we can M-x insert-screenshot to have the image
inserted at the cursor location.

* Example 2: Tasks and Agenda
:PROPERTIES:
:CUSTOM_ID: ex:agenda
:END:

** Headlines can be tasks
Adding a TODO in front of a headline title turns it into a task.

#+BEGIN_SRC org
,* TODO Buy bread
#+END_SRC

You can mark the task as DONE with C-c C-t, or you can define your [[info:org#TODO%20extensions][own
workflows]].

You can also schedule tasks (C-c C-s) for a particular day or time, or turn
tasks into deadlines (C-c C-d).  Org includes an agenda where you can see tasks
from all your Org files, and you can customize the view to your needs.

** My agenda workflow
Let's see an example.  My workflow is that whenever I need to remember doing
something, I [[elisp:org-capture][capture]] the task and refile it.  They all go into a single
~tasks.org~ file with loose hierarchies.  I rarely interact with the tasks.org
file though, and just use [[elisp:org-agenda][the agenda]] instead.

In the agenda, I have defined a custom view with all the tasks for the week, the
upcoming deadlines and unscheduled tasks.  Every day, if I have scheduled tasks
I work on them, and when I don't have scheduled tasks anymore I pick some
unscheduled ones and schedule them.  After I finish working on a task, I mark
them as DONE.

Every week we have our flash team meeting, and I can look at what I did in the
previous week with another custom view:

#+BEGIN_SRC elisp
(setq org-agenda-window-setup 'current-window
    org-agenda-custom-commands
    '(("Rw" "Week in review"
       agenda "" ((org-agenda-overriding-header "Week in review")
                  (org-agenda-span 'week)
                  (org-agenda-start-on-weekday 1)
                  (org-agenda-start-with-log-mode t)))))
#+END_SRC

It's my workflow, and it doesn't have to be yours.  Again, the greatness of
Emacs is the ability to tailor it to your needs.  Here are [[https://orgmode.org/worg/org-gtd-etc.html][other examples]] that
may inspire you.

* Example 3: Keeping track of grades
:PROPERTIES:
:CUSTOM_ID: ex:grades
:END:

** The Org spreadsheet
Org comes with a spreadsheet.  It doesn't rival Excel in capabilities, but it
can perform light table calculations.  And it's still just text that you can
export to HTML, navigate with Lisp, etc.

See [[info:org#Tables][Tables]] in the Org manual for creating tables and crunching numbers.

** Example of a students grades table
I use the spreadsheet mostly for keeping track of student grades.  Here is an
example of the tables I create (names of the guilty have been replaced with
[[https://en.wikipedia.org/wiki/List_of_valkyrie_names][Valkyries]]):

| Name          |    1 |   2 |   3 |   4 |   5 | Grade |
|---------------+------+-----+-----+-----+-----+-------|
| Brynhildr     |    1 |   1 |   1 |   1 |   1 |     5 |
| Eir           |    1 |  .5 |   1 |     |     |   2.5 |
| Geirahöð      |    1 |   1 |   1 |   1 |     |     4 |
| Geiravör      |    1 |   1 |   1 |  .5 |     |   3.5 |
| Geirdriful    |    1 |   1 |   1 |   1 |     |     4 |
| Geirönul      |      |  .5 |  .5 |  .5 |     |   1.5 |
| Geirskögul    |   .5 |   1 |   1 |   1 |   1 |   4.5 |
| Göll          |   .5 |   1 |  .5 |  .5 |     |   2.5 |
| Göndul        |   .5 |   1 |   1 |  .5 |     |    3. |
| Guðr          |    1 |  .5 |   1 |  .5 |  .5 |   3.5 |
| Herfjötur     |    1 |   1 |  .5 |  .5 |  .5 |   3.5 |
| Herja         |      |     |     |     |     |     0 |
| Hlaðguðr      |   .5 |   1 |   1 |     |     |   2.5 |
| Hildr         |    1 |     |  .5 |  .5 |  .5 |   2.5 |
| Hjalmþrimul   |    1 |   1 |  .5 |  .5 |     |    3. |
| Hervör alvitr |    1 |     |  .5 |     |     |   1.5 |
| Hjörþrimul    |    1 |   1 |   1 |  .5 |     |   3.5 |
| Hlökk         |      |  .5 |  .5 |     |     |    1. |
| Hrist         |    1 |   1 |  .5 |  .5 |  .5 |   3.5 |
| Hrund         |   .5 |  .5 |   1 |     |     |    2. |
| Kára          |   .5 |   1 |   1 |  .5 |   1 |    4. |
| Mist          |    1 |   1 |   1 |  .5 |   1 |   4.5 |
| Ölrún         |    1 |   1 |  .5 |  .5 |  .5 |   3.5 |
| Randgríðr     |   .5 |   1 |   1 |  .5 |     |    3. |
| Ráðgríðr      |    1 |   1 |  .5 |  .5 |     |    3. |
| Reginleif     |      |   1 |   1 |     |   1 |     3 |
| Róta          |    1 |  .5 |   1 |  .5 |     |    3. |
|---------------+------+-----+-----+-----+-----+-------|
| Answers       | 19.5 | 21. | 21. | 12. | 7.5 |       |
|---------------+------+-----+-----+-----+-----+-------|
| Mean          |      |     |     |     |     |  3.00 |
| Std Deviation |      |     |     |     |     |  1.12 |
#+TBLFM: @2$7..@28$7=vsum($2..$6);NE::@29$2..@29$6=vsum(@I..@II)::@30$7=vmean(@I..@II);%.2f::@31$7=vsdev(@I..@II);%.2f

Org has structured editing for tables: I can move rows and columns around, I can
add new lines or columns... and it's still just text.

I have one column for each question on the exam.  Points are either zero
(empty), half (.5) or full (1).  The total for each student is summed in the
Grade column automatically.

Answers to all questions can also be seen in the Answers row.  Question 5 was
more difficult it seems.

Org can also compute the mean and standard deviation for the grades.  These
formulas are added in the TBLFM line below the table (see [[info:org#The%20spreadsheet][The spreadsheet]] part
of the Org manual).

In fact, the Org spreadsheet can use either the Emacs built-in Calc calculator,
or arbitrary Lisp, so you could take the customization pretty far.

** Filling the table faster
As an example, to speed up filling out the table, I have created very simple
macros that input either "1" or ".5" and go to the next column at the press of a
button:

#+name: fast input of answers
#+BEGIN_SRC elisp :results silent
(fset 'js-full [?1 tab])
(fset 'js-yes  [?. ?5 tab])
(fset 'js-no   [tab])

(local-set-key (kbd "z") 'js-full)
(local-set-key (kbd "x") 'js-yes)
(local-set-key (kbd "c") 'js-no)
#+END_SRC

After evaluating that block, I can use the keys Z, X and C as shortcuts
(local-set-key rebinds the key only in the current buffer).  This allows me to
fill out the table as I look at the student copy, without looking at the
keyboard or the screen.

(To unset the shortcuts, evaluate the next block:)

#+name: unset the shortcuts above
#+BEGIN_SRC elisp :results silent
(local-unset-key (kbd "z"))
(local-unset-key (kbd "x"))
(local-unset-key (kbd "c"))
#+END_SRC

** Exporting to CSV
Finally, I can export the table to CSV, to share it with people who have to work
with inferior programs.

#+BEGIN_SRC elisp :results value silent
(save-excursion
  (search-backward "Brynhildr" nil t 2)
  (org-table-export "/tmp/org-table.csv" "orgtbl-to-csv"))
#+END_SRC

[[file:/tmp/org-table.csv]]

* Example 4: Your tutorial in one document
:PROPERTIES:
:CUSTOM_ID: ex:tp
:END:
Giving a class tutorial in computer science involves editing many
files. Most of the time you have one file with tutorial instructions
and questions. This file should be printable, and better be published
online so that students can copy/paste code snippets. You may also
have a source code file which contains the tutorial solution to
show/evaluate it during the class and maybe distribute it at the end.
Finally, you'll undoubtedly pair this with some slides to point out to
lecture notions.

Tracking all these files is nagging. Doing a modification in one
implies modifications in others. Fortunately, Org is powerful enough
to produce all of these in one document.

** A tutorial of mine
Let's look at a [[https://rcherrueau.github.io/teaching/virt2018/index.org][tutorial]] of mine in Org. Every time, I stick with the
following structure: a top-level headline is either a tutorial
instruction (e.g., Requirements), a question (e.g., Exercise: Start &
Operate Virtualized Env.) or a lecture notion (e.g., What is
Virtualization).

From there, we can easily call [[help:org-latex-export-to-pdf][~org-latex-export-to-pdf~]] to export the
document as index.pdf and print it. We can also call
[[help:org-html-export-to-html][~org-html-export-to-html~]] to export the document as index.html and
[[https://rcherrueau.github.io/teaching/virt2018/][publish it online]] -- the CSS comes from [[http://gongzhitaao.org/orgcss/][Zhitao Gong]]. More generally,
we can do C-c C-e to get common dispatchers and export the document in
plain text for instance.

Did you notice that some of the headlines contain the ~solution~ tag:
C-c / m solution RET. These headlines encompass exercise solutions. I
keep them in a subtree in conjunction with the ~#+EXCLUDE_TAGS:
solution~ [[info:org#Export%20settings][export settings]], so that Org hides solutions from the
export, which is useful to keep track of solutions without disclosing
them to students. Then, commenting the ~EXCLUDE_TAGS~ out reveals the
solutions to students when it is time to share them.

#+CAPTION: Comment the ~EXCLUDE_TAGS~ to reveals exercise
#+CAPTION: solutions from the export
#+BEGIN_SRC org
# #+EXCLUDE_TAGS: solution
#+END_SRC

** org-present for a step by step presentation
When giving a tutorial, I noticed that going step by step (or headline
by headline) works well. By giving 10 or 15 minutes per step to
students, then check it works for everyone, and move to the next step,
It ensures that no students are left behind. We can achieve this using
[[https://github.com/rlister/org-present][org-present]].

org-present is a light-weight simple presentation mode. It turns the
Emacs editor in a presentation engine that displays headings of the
Org document one after the other. Combining it with the variables that
hide the symbols and cursor (see [[lst:hide-cursor]]), it turns our Org
document into a step by step tutorial that looks good on a beamer.

#+NAME: lst:hide-cursor
#+BEGIN_SRC elisp
(eval-after-load "org-present"
  '(progn
     (add-hook 'org-present-mode-hook
               (lambda ()
                 (org-present-big)
                 (org-display-inline-images)
                 (org-present-hide-cursor)
                 (org-present-read-only)
                 (setq org-hide-emphasis-markers t)))
     (add-hook 'org-present-mode-quit-hook
               (lambda ()
                 (org-present-small)
                 (org-remove-inline-images)
                 (org-present-show-cursor)
                 (org-present-read-write)
                 (setq org-hide-emphasis-markers nil)))))
#+END_SRC

We can start the presentation with M-x org-present. Then we could use
left and right keys to move from one headline to another and C-c C-q
to quit. As in a standard presentation, we can display images. And
thanks to Org, we can also evaluate code blocks with C-c C-c.

(The [[https://github.com/syl20bnr/spacemacs/blob/c7a103a772d808101d7635ec10f292ab9202d9ee/layers/%252Bemacs/org/packages.el#L29][org layer]] of Spacemacs already packages org-present. For others,
you may need to install it from [[https://melpa.org][melpa]] first.)

* Example 5: Write and test your lab with Babel
:PROPERTIES:
:CUSTOM_ID: ex:blog
:END:
[[https://orgmode.org/worg/org-contrib/babel/][Babel]] is the Org ability to write, execute and connect blocks of
source code in an Org document. Features include /evaluating/ source
code in one of the 40 [[info:org#Languages][supported languages]] (emacs-lisp, python, shell,
even Graphviz dot); Formatting evaluated output as text, table, HTML,
code, ... and pass it to another block; /Tangling/ source code blocks
in executable scripts (and propagate changes in scripts [[help:org-babel-detangle][back to the
original Org document]]); And support of the [[info:org#Noweb%20reference%20syntax][noweb]] syntax to produce
human readable source code for literate programming.

This section gives you a glimpse of Org Babel. I recommend the reading
of [[info:org#Working%20with%20source%20code][working with source code]] org manual as reference documentation.

** Org Babel for literate programming
:PROPERTIES:
:header-args: :noweb yes :shebang #!/usr/bin/env bash
:END:
As an example of literate programming, let's consider the following
source code block that takes a /thing/ -- forget about what a /thing/
is right now -- and pass it to [[https://github.com/busyloop/lolcat][~lolcat~]] (a modern replacement to
~cat~). The ~:tangle~ header says to extract the source code from the
block and put it into a script called ~org-babel-rocks.sh~ for a later
execution by a computer.

#+BEGIN_SRC sh :tangle "org-babel-rocks.sh"
<<thing>> | lolcat
#+END_SRC

Following blocks to the same target file will be concatenated during
tangling in the order at which they appear in the Org document.

This makes Org a formidable tool to produce /humane readable
documentation/. This, plus the support of [[info:org#Noweb%20reference%20syntax][noweb]] syntax. Noweb lets us
take out a definition from the source code block to omit or postpone
its explanation. For instance here, we say that the thing given to
~lolcat~ is an ASCII art of the string ~"Org Babel Rocks"~ generated
with the [[https://github.com/cmatsuoka/figlet][~figlet~]] program.

#+BEGIN_SRC sh :noweb-ref thing
figlet "Org Babel Rocks"
#+END_SRC

We can tangle the program with C-c C-v t and see it at
[[file:org-babel-rocks.sh]]. Note that the file is executable so we can
run it.

** EnOS Lab with literate programming
As a concrete example, see the step by step [[https://enos.readthedocs.io/en/4.2.1/tutorial/index.html][G5k lab]] of the [[https://github.com/BeyondTheClouds/enos][EnOS]] tool.

As developers of EnOS, we need a lab to instruct users on how to use
EnOS. And we want this lab to be /executable/ to ensure that every
time we change the source of EnOS, the lab still makes sense.

Of course, we don't want to maintain a side script that reflects the
lab. Keeping it consistent with the lab is hazardous. Rather, we want
to extract each shell commands and configuration files from the lab.
Thus, we can execute them on our continuous integration (CI) system
and validate the lab.

Once again, an [[https://raw.githubusercontent.com/BeyondTheClouds/enos/stable/queens/docs/tutorial/index.org][Org document]] does the trick. Every source code block of
shell from the lab comes with the ~:tangle~ header. Hence doing C-c
C-v t produces an [[https://github.com/BeyondTheClouds/enos/tree/cfc9c92c7a06e68475b7c906623af86f61b1adc7/tests/functionnal/tests/tutorial/enos-node.sh][executable script version]] of the lab.

In this case, we want both tangling the shell executable script and
exporting the reStructuredText (rst) documentation. One way to get it
is by doing C-c C-v t (for tangling) and then C-c C-e r r (for rst).
The Emacs lisp code at the end of the document does exactly that.
First tangling the script, and then exporting the lab.

#+BEGIN_SRC elisp
(org-babel-tangle)
(load-file "~/.emacs.d/private/ox-rst.el")
(require 'ox-rst)
(org-rst-export-to-rst nil)
#+END_SRC

** Org Babel for reproducible research
The idea of /reproducible research/ is to produce a complete report
with experiment data, analysis code and results. Thus, a reviewer can
dig into your contribution, e.g., understand what is behind an average
value or change the /scale/ of a graph.

Once again, Babel provides a powerful tool call ~session~. With
session, we can seamlessly share a variable of one source code block
#+BEGIN_SRC python :session my-xp :results none
variable = "var in session"
#+END_SRC
with another.
#+BEGIN_SRC python :session my-xp
variable.upper()
#+END_SRC

** Discovery Blog as reproducible research
As a concrete example, see this [[https://beyondtheclouds.github.io/blog/openstack/cockroachdb/2018/06/04/evaluation-of-openstack-multi-region-keystone-deployments.html][Discovery blog article]]. The blog does
the performance evaluation of distributed databases in the context of
OpenStack. If we go through the article, we see:
- Experimental protocol and tested variables.
- Code to analyze experimental data.
- Graph results and interpretations (+ pending TODOs).

The [[https://raw.githubusercontent.com/rcherrueau/juice/notebook/analyses/notebook.org][original document]] relies on Babel code evaluation and session to
get instant feedback of the analysis. The benefit is twice:
- First, it produces a complete report with experiment data, analysis
  code and result.
- Second, we can change the analysis and live play with it to find the
  best representation that suits the subject we want to highlight.

* Resources to go further
** Starting with Emacs
Start with [[elisp:help-with-tutorial][the tutorial]] (C-h t).

Then look at [[info:Emacs][the manual]].  You don't have to read all of it, but it's good to
know where certain things are documented.  It's also helpfully structured with
"things you will always use" first, and advanced features second.

Another good resource is this 3-parts [[https://tuhdo.github.io/emacs-tutor.html][mini manual]].

If you want to get a feel of what a fully-customized Emacs is capable of, look
for [[https://github.com/emacs-tw/awesome-emacs#starter-kit][starter kits]].

However, to get the most out of Emacs, it's best to build your own
configuration, tailored to your needs.

** Customizing Emacs
Start by picking some [[https://github.com/emacs-tw/awesome-emacs][useful packages]].  I recommend a fuzzy prompt like ido, ivy
or Helm, and [[https://magit.vc/][Magit]] if you often use git.

Pretty soon, you'll want to write your own functions.  The manual has [[info:ELisp][a
comprehensive chapter]] on the Emacs Lisp language.  If you are short on time,
[[https://github.com/chrisdone/elisp-guide][this]] is a brief guide.  If you want to get more familiar with Lisps in general,
there is no greater introduction than [[https://mitpress.mit.edu/sites/default/files/sicp/index.html][the wizard book]] (which will, incidentally,
make you a wizard).

Steal [[https://github.com/emacs-tw/awesome-emacs#noteworthy-configurations][from others]]!  If you find a useful functionality, you should steal and
include it in your own configuration.  That's how your Emacs gets tailored to
your needs.

** Links
- [[https://codearsonist.com/reading-for-programmers][An article]] on how to manage your bibtex citations and PDF notes using Emacs +
  [[https://github.com/politza/pdf-tools][PDF tools]].
- [[https://github.com/alegrand/SMPE][A course]] on reproducible research (not Org-specific).
- [[https://www.jstatsoft.org/article/view/v046i03][A paper]] from one of the authors of Org on reproducible research.
