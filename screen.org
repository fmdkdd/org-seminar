# -*- fill-column: 50; -*-

#+BEGIN_SRC elisp :results silent
(defun sync-heading-with-buffer ()
  "Move to the same heading in another buffer."
  (interactive)
  (unless (org-before-first-heading-p)
    ;; Find current heading for current buffer
    (let ((heading (org-get-heading)))
      ;; Goto heading in slave buffer
      (with-selected-window (get-buffer-window "notes.org" 'all-frames)
        (goto-char (point-min))
        (search-forward heading)
        (recenter-top-bottom 0)))))

(add-hook 'post-command-hook #'sync-heading-with-buffer nil 'local)
#+END_SRC

* Emacs is not just a text editor
Emacs is a Lisp virtual machine made
for manipulating text.

(progn
  (search-backward "Lisp" nil t 2)
  (set-mark (point))
  (forward-word))

We can call external processes just as easily:

(progn
  (forward-char)
  (call-process "ls" nil t t "/"))

Emacs is not an editor that you just use,
but one that /grows/ with you.

- It's portable and runs basically everywhere.
- It's fully customizable.
- It's self-documented: [[info:Emacs][User manual]]
   [[info:ELisp][Emacs Lisp manual]]

* Org overview
It's like markdown, but better.

** It's just text!
*bold* /emphatic/ ~code~

** Each headline is a note
#+BEGIN_SRC org
,* A level 1 headline
,** A level 2 headline
,*** A level 3 headline
,** Another level 2 headline
,* Another level 1 headline
#+END_SRC

** Built-in folding and structured editing
TAB to fold
M-<UP>, M-<DOWN> move headlines
M-<LEFT>, M-<RIGHT> change their depth
M-S-<LEFT>, M-S-<RIGHT> shift subtrees

** Links are interactive
[[info:org#Hyperlinks][Link to the Org manual section on links]].

** Links are extensible!
[[*Links are interactive][Link to Org headlines]]
[[help:help][Link to Emacs help]]
[[elisp:view-emacs-news][Link to execute Emacs Lisp code]]
To bibtex entries, to mails... and [[info:org#Adding%20hyperlink%20types][more]]!

** Export to HTML, LaTeX...
C-c C-e brings the export dispatcher

** Org can evaluate programming languages blocks
#+BEGIN_SRC python
return sorted([5, 2, 4, 3, 1])
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 |

(require 'ob-python)

** Headlines can be tagged
#+BEGIN_SRC org
,* A headline with tags                                   :org:tutorial:emacs:
#+END_SRC

* Example 1: Keeping a research log
** You should keep log too!
Keeping a log has immediate benefits:

- Writing down your thoughts help clarifying them
- It's a vault for information you may need later
- Seeing your effort helps keeping motivated

** I'll show you mine
C-c / m search notes with tag
C-c / r search notes with arbitrary text

** Smooth screenshot insertion
#+BEGIN_SRC elisp
(defun insert-screenshot (file-name)
  "Save screenshot to FILE-NAME and insert an Org link at point."
  (interactive "FSave to file: ")
  (let ((absolute-path (expand-file-name file-name)))
    (call-process "import" nil nil nil absolute-path)
    (insert (format "[[file:%s]]" absolute-path))
    (org-redisplay-inline-images)))
#+END_SRC

M-x insert-screenshot

* Example 2: Tasks and Agenda
** Headlines can be tasks
#+BEGIN_SRC org
,* TODO Buy bread
#+END_SRC

C-c C-t to mark as DONE
C-c C-s to schedule
C-c C-d to turn into deadlines
M-x org-agenda to see the week's tasks

** My agenda workflow
- Capture, refile, schedule, work
- Weekly review

#+BEGIN_SRC elisp
(setq org-agenda-window-setup 'current-window
    org-agenda-custom-commands
    '(("Rw" "Week in review"
       agenda "" ((org-agenda-overriding-header "Week in review")
                  (org-agenda-span 'week)
                  (org-agenda-start-on-weekday 1)
                  (org-agenda-start-with-log-mode t)))))
#+END_SRC

* Example 3: Keeping track of grades
** The Org spreadsheet

** Example of a students grades table

| Name        |    1 |   2 |   3 |   4 |   5 | Grade |
|-------------+------+-----+-----+-----+-----+-------|
| Brynhildr   |    1 |   1 |   1 |   1 |   1 |     5 |
| Eir         |    1 |  .5 |   1 |     |     |   2.5 |
| Geirahöð    |    1 |   1 |   1 |   1 |     |     4 |
| Geiravör    |    1 |   1 |   1 |  .5 |     |   3.5 |
| Geirdriful  |    1 |   1 |   1 |   1 |     |     4 |
| Geirönul    |      |  .5 |  .5 |  .5 |     |   1.5 |
| Geirskögul  |   .5 |   1 |   1 |   1 |   1 |   4.5 |
| Göll        |   .5 |   1 |  .5 |  .5 |     |   2.5 |
| Göndul      |   .5 |   1 |   1 |  .5 |     |    3. |
| Guðr        |    1 |  .5 |   1 |  .5 |  .5 |   3.5 |
| Herfjötur   |    1 |   1 |  .5 |  .5 |  .5 |   3.5 |
| Herja       |      |     |     |     |     |     0 |
| Hlaðguðr    |   .5 |   1 |   1 |     |     |   2.5 |
| Hildr       |    1 |     |  .5 |  .5 |  .5 |   2.5 |
| Hjalmþrimul |    1 |   1 |  .5 |  .5 |     |    3. |
| Hervör      |    1 |     |  .5 |     |     |   1.5 |
| Hjörþrimul  |    1 |   1 |   1 |  .5 |     |   3.5 |
| Hlökk       |      |  .5 |  .5 |     |     |    1. |
| Hrist       |    1 |   1 |  .5 |  .5 |  .5 |   3.5 |
| Hrund       |   .5 |  .5 |   1 |     |     |    2. |
| Kára        |   .5 |   1 |   1 |  .5 |   1 |    4. |
| Mist        |    1 |   1 |   1 |  .5 |   1 |   4.5 |
| Ölrún       |    1 |   1 |  .5 |  .5 |  .5 |   3.5 |
| Randgríðr   |   .5 |   1 |   1 |  .5 |     |    3. |
| Ráðgríðr    |    1 |   1 |  .5 |  .5 |     |    3. |
| Reginleif   |      |   1 |   1 |     |   1 |     3 |
| Róta        |    1 |  .5 |   1 |  .5 |     |    3. |
|-------------+------+-----+-----+-----+-----+-------|
| Answers     | 19.5 | 21. | 21. | 12. | 7.5 |       |
|-------------+------+-----+-----+-----+-----+-------|
| Mean        |      |     |     |     |     |  3.00 |
| Std Dev     |      |     |     |     |     |  1.12 |
#+TBLFM: @2$7..@28$7=vsum($2..$6);NE::@29$2..@29$6=vsum(@I..@II)::@30$7=vmean(@I..@II);%.2f::@31$7=vsdev(@I..@II);%.2f

** Filling the table faster
#+name: fast input of answers
#+BEGIN_SRC elisp :results silent
(fset 'js-full [?1 tab])
(fset 'js-yes  [?. ?5 tab])
(fset 'js-no   [tab])

(local-set-key (kbd "z") 'js-full)
(local-set-key (kbd "x") 'js-yes)
(local-set-key (kbd "c") 'js-no)
#+END_SRC

#+name: unset the shortcuts above
#+BEGIN_SRC elisp :results silent
(local-unset-key (kbd "z"))
(local-unset-key (kbd "x"))
(local-unset-key (kbd "c"))
#+END_SRC

** Exporting to CSV
#+BEGIN_SRC elisp :results value silent
(save-excursion
  (search-backward "Brynhildr" nil t 2)
  (org-table-export "/tmp/org-table.csv" "orgtbl-to-csv"))
#+END_SRC

* Example 4: Your tutorial in one document
A tutorial in CS is made of:

- A file with instructions/questions (printable,
  publishable online)
- A script with question solutions
- Some slides with lecture notions

/One Org document to rule them all/

** A tutorial of mine
https://rcherrueau.github.io/teaching/virt2018/index.org

- Headline:
  + An instruction (e.g., Requirements)
  + A question (e.g., Excercise: Start & Operate
    Virtualized Env.)
  + A lecture notion (e.g., What is
    Virtualization)
- Printable and online publishable for free with
  C-c C-e
- ~solution~ tag with ~EXCLUDE_TAGS~ setting to
  hide solutions
  #+BEGIN_SRC org
  ,#+EXCLUDE_TAGS: solution
  #+END_SRC

** org-present for a step by step presentation
#+BEGIN_SRC elisp
(eval-after-load "org-present"
  '(progn
     (add-hook 'org-present-mode-hook
               (lambda ()
                 (org-present-big)
                 (org-display-inline-images)
                 (org-present-hide-cursor)
                 (org-present-read-only)
                 (setq org-hide-emphasis-markers t)))
     (add-hook 'org-present-mode-quit-hook
               (lambda ()
                 (org-present-small)
                 (org-remove-inline-images)
                 (org-present-show-cursor)
                 (org-present-read-write)
                 (setq org-hide-emphasis-markers nil)))))
#+END_SRC

M-x org-present, then left/right and C-c C-q to
quit.

* Example 5: Write and test your lab with Babel
Write, execute and connect blocks of source code

** Org Babel for literate programming
:PROPERTIES:
:header-args: :noweb yes :shebang #!/usr/bin/env bash
:END:
/Literate programming/ with block tangling in
executable scripts: C-c C-v t
#+BEGIN_SRC sh :tangle "org-babel-rocks.sh"
<<thing>> | lolcat
#+END_SRC

And support of [[info:org#Noweb%20reference%20syntax][noweb]] syntax to omit/postpone
explanation of a definition and produce *humane
readable doc*
#+BEGIN_SRC sh :noweb-ref thing
figlet "Org Babel Rocks"
#+END_SRC

** EnOS Lab with literate programming
- [[https://enos.readthedocs.io/en/4.2.1/tutorial/index.html][G5k lab]]
- [[https://github.com/BeyondTheClouds/enos/tree/cfc9c92c7a06e68475b7c906623af86f61b1adc7/tests/functionnal/tests/tutorial][Executables scripts]]
- [[https://raw.githubusercontent.com/BeyondTheClouds/enos/stable/queens/docs/tutorial/index.org][Org source document]]

Shell tangling and reStructuredText export with
C-c C-c
#+BEGIN_SRC elisp
(org-babel-tangle)
(load-file "~/.emacs.d/private/ox-rst.el")
(require 'ox-rst)
(org-rst-export-to-rst nil)
#+END_SRC

** Org Babel for reproducible research
Produce a complete report with:
- Experiment data
- Analysis code
- Results

Relies on session to seamlessly share variables of
one source code block
#+BEGIN_SRC python :session my-xp :results none
variable = "var in session"
#+END_SRC
with another
#+BEGIN_SRC python :session my-xp
variable.upper()
#+END_SRC

#+RESULTS:
: VAR IN SESSION

** Discovery Blog as reproducible research
- [[https://beyondtheclouds.github.io/blog/openstack/cockroachdb/2018/06/04/evaluation-of-openstack-multi-region-keystone-deployments.html][Discovery blog]]
- [[https://raw.githubusercontent.com/rcherrueau/juice/notebook/analyses/notebook.org][Org source document]]
